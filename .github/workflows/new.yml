name: CD - Infrastructure and Deployment

on:
  workflow_dispatch:

jobs:
  create-infra:
    if: ${{ github.event.inputs.action == 'create-infra' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          cd Terraform4
          terraform init

      - name: Terraform Apply
        run: |
          cd Terraform4
          terraform apply -auto-approve

  deploy-app:
    if: ${{ github.event.inputs.action == 'deploy-app' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Get ECS Task Definition ARN
        id: get_task_def
        run: |
          RAW_OUTPUT=$(aws ecs list-task-definitions \
            --family-prefix strapi-task \
            --sort DESC \
            --max-items 1 \
            --query 'taskDefinitionArns' \
            --output text)

          echo "Raw output: $RAW_OUTPUT"

          TASK_ARN=$(echo "$RAW_OUTPUT" | grep -v 'None' | head -n 1)

          if [ -z "$TASK_ARN" ]; then
            echo "No valid task definition ARN found. Exiting."
            exit 1
          fi

          echo "Valid task definition ARN: $TASK_ARN"
          echo "taskDefinitionArn=$TASK_ARN" >> "$GITHUB_OUTPUT"

      - name: Trigger CodeDeploy Deployment
        run: |
          APPSPEC_JSON=$(jq -n \
            --arg taskdef "${{ steps.get_task_def.outputs.taskDefinitionArn }}" \
            '{
              version: "1.0",
              Resources: [{
                TargetService: {
                  Type: "AWS::ECS::Service",
                  Properties: {
                    TaskDefinition: $taskdef,
                    LoadBalancerInfo: {
                      ContainerName: "strapi",
                      ContainerPort: 1337
                    }
                  }
                }
              }]
            }')

          aws deploy create-deployment \
            --application-name strapi-app-deploy \
            --deployment-group-name strapi-deploy-group \
            --deployment-config-name CodeDeployDefault.ECSCanary10Percent5Minutes \
            --revision "revisionType=AppSpecContent,appSpecContent={content=$APPSPEC_JSON}"
