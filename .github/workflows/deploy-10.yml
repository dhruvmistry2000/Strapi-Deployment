name: Strapi Deployment using ECS in CODEDEPLOY

on:
  workflow_dispatch:  # Triggered manually via the GitHub UI

jobs:
  CodeDeploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7 

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Initialize Terraform
        run: |
          cd Terraform2
          terraform init

      - name: Generate Terraform Plan
        run: |
          cd Terraform2
          terraform plan \
            -var "image_uri=${{ secrets.ECR_REPOSITORY }}" \
            -var "region=${{ secrets.AWS_REGION }}"

      - name: Apply Terraform Configuration
        run: |
          cd Terraform2
          terraform apply \
            -var "image_uri=${{ secrets.ECR_REPOSITORY }}" \
            -var "region=${{ secrets.AWS_REGION }}" \
            --auto-approve

      - name: Register new task definition
        id: register_task_definition
        run: |
          NEW_TASK_DEF_JSON=$(aws ecs register-task-definition \
            --family strapi-task \
            --region ${{ secrets.AWS_REGION }} \
            --task-role-arn "arn:aws:iam::985539759598:role/ecsTaskExecutionRole" \
            --execution-role-arn "arn:aws:iam::985539759598:role/ecsTaskExecutionRole" \
            --network-mode awsvpc \
            --requires-compatibilities "FARGATE" \
            --cpu 512 \
            --memory 1024 \
            --container-definitions "[{\"name\":\"strapi\",\"image\":\"${{ secrets.ECR_REPOSITORY }}:latest\",\"portMappings\":[{\"containerPort\":1337,\"protocol\":\"tcp\"}]}]" \
            --output json)

          NEW_TASK_DEF_ARN=$(echo $NEW_TASK_DEF_JSON | jq -r '.taskDefinition.taskDefinitionArn')

          echo "NEW_TASK_DEF_ARN=$NEW_TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Create appspec.yaml dynamically
        run: |
          cat > appspec.yaml <<EOF
          version: 1
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: "$NEW_TASK_DEF_ARN"
                  LoadBalancerInfo:
                    ContainerName: "strapi"
                    ContainerPort: 1337
          EOF

      - name: Upload AppSpec file to S3
        run: |
          aws s3 cp appspec.yaml s3://${{ secrets.S3_BUCKET }}/deploy/appspec.yaml --region ${{ secrets.AWS_REGION }}

      - name: Create deployment
        run: |
          aws deploy create-deployment \
            --application-name StrapiCodeDeployApp2 \
            --deployment-group-name StrapiDeploymentGroup2 \
            --deployment-config-name CodeDeployDefault.ECSAllAtOnce \
            --s3-location bucket=${{ secrets.S3_BUCKET }},key=deploy/appspec.yaml,bundleType=YAML \
            --region ${{ secrets.AWS_REGION }}
